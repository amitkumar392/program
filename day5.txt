Handling a checked exception by opening a file
Write a  code opens a text file and writes its content to the standard output. What happens if the file doesn’t exist?

 

Java has built-in mechanism to handle exceptions. Using the try statement we can test a block of code for errors. The catch block contains the code that says what to do if exception occurs.
This problem will test your knowledge on try-catch block.

You will be given two integers and as input, you have to compute . If and are not bit signed integers or if is zero, exception will occur and you have to report it. Read sample Input/Output to know what to report in case of exceptions.

Sample Input :

10

3

Sample Output :

3

Sample Input :

10

Hello

Sample Output :

java.util.InputMismatchException

Sample Input :

10

0

Sample Output :

java.lang.ArithmeticException: / by zero

Sample Input :

23.323

0

Sample Output :

java.util.InputMismatchException

 

 

You are required to compute the power of a number by implementing a calculator. Create a class MyCalculator which consists of a single method long power(int, int). This method takes two integers, and , as parameters and finds . If either or is negative, then the method must throw an exception which says "". Also, if both and are zero, then the method must throw an exception which says ""
For example, -4 and -5 would result in .

Complete the function power in class MyCalculator and return the appropriate result after the power operation or an appropriate exception as detailed above.

Sample Input:

3 5

2 4

0 0

-1 -2

-1 3

Sample Output:

243

16

java.lang.Exception: n and p should not be zero.

java.lang.Exception: n or p should not be negative.

java.lang.Exception: n or p should not be negative.

 

Write a program to get the name and age of the player from the user and  display it. 
player name is a string 

player age is an integer value 

Note : The player is eligible to participate in IPL when their age is 19 and above 

  This program may generate   

1. InvalidAgeRange Custom Exception when the player's age is below 19 

 Use exception handling mechanisms to handle these exceptions 

 

 Create a class called CustomException which extends Exception and it includes constructor to initialize the message. 

 

 Use appropriate exception handling mechanisms to handle these exceptions  

Sample  Input/Output 1:

Enter the player name

Albie Morkel

Enter the player age

35

Player name : Albie Morkel

Player age : 35

 

Sample  Input/Output 2:

Enter the player name

Ishan Kishan

Enter the player age

16

CustomException: InvalidAgeRangeException

Given total runs scored and  total overs faced as the input. Write a program to calculate the run rate with the formula,
Run rate= total runs scored/total overs faced.

Use BufferedReader class to get the inputs from user.

 This program may generate Arithmetic Exception / NumberFormatException. Use exception handling mechanisms to handle this exception. Use a single catch block. In the catch block, print the class name of the exception thrown.

Sample Input and Output 1:

Enter the total runs scored

79

Enter the total overs faced

14

Current Run Rate : 5.64 

Sample Input and Output 2:

Enter the total runs scored

50

Enter the total overs faced

 0

java.lang.ArithmeticException

Sample Input and Output 3:

Enter the total runs scored

a

java.lang.NumberFormatException

 

Exception Class Hierarchy – Diagram and explanation about each Exception class (which we learnt)
 

Write the sample code one for anonymous class and another for anonymous method – explain what the details and execution in your own words  and share the generated class files (images)
 

Static code Analyzer report (no errors and warnings count is less than 20) – please activate your checkstyle for that project. Use sonarlint plugin for eclipse..
 

Project code explorer screen shot (package convention: com.hcl.training.day5 for your additional learnings & com.hcl.training.day5.exercise for assignments given by me)
From: Anbarasu Venkatachalam
Sent: Wednesday, May 6, 2020 16:44
To: Akash Narang <akash.narang@hcl.com>; Amit Kumar <amitkumar.a1@hcl.com>; Jyoti Singh <jyoti.singh@hcl.com>; Ananya Anshudhar <ananya.anshudhar@hcl.com>; Deepanshu Tiwari <deepanshu.tiwari@hcl.com>; Arunima Uniyal <arunima.uniyal@hcl.com>; Jyoti Upadhyay <jyoti.upadhyay@hcl.com>; Krishnakumar G M <krishnakumarg.m@hcl.com>; Avijit Shaw <avijit.shaw@hcl.com>; Lakshmi Dornala <lakshmi.dornala@hcl.com>; Rabia Garg <rabia.garg@hcl.com>; Saladi Swamy Naga Venkata Ganesh Saiteja <saladiswamyna.saite@hcl.com>; Shubham Gupta <shubham_gupta@hcl.com>; Sahitya Saurabh <sahitya.saurabh@hcl.com>; Vishnu Dutt <vishnu.dutt@hcl.com>; Pooja Cirikonda <pooja.cirikonda@hcl.com>; Sutapalli Navya <sutapalli.navya@hcl.com>; Siddharth Kumar Gupta <siddharthkumar.gupta@hcl.com>; Sparsh Jain <sparsh.jain@hcl.com>; Mohini Singh <mohini.singh2@hcl.com>; Dhanunjaya K <DhanunjayaK@hcl.com>; Abhishek Parsai <abhishekpar@hcl.com>; Atul Sharma <atul_sharma@hcl.com>; Samridhi Bareja <samridhi.bareja@hcl.com>; Monicca Gunasekaran <monicca.g@hcl.com>; Sangeetha B <sangeethab.s@hcl.com>; Archana G <archana.g@hcl.com>
Cc: Tasneem Badwahwala <tasneem.b@hcl.com>; Suchitra Bhat (HCL Financial Services) <Suchitra.Bhat@hcl.com>
Subject: RE: Credit Suisse: Batch #2, Java Full Stack Training - Day4 Exercises

 

Team – I had modified the day#4 – Exercise # 12. Please incorporate this change and share the solution document (copy the code and output below each exercise)

 

12) Create an class named Student with the following private attributes / member variables.

String name

Exam[5] exams

Book[2] books

Include a 2-argument constructor.

Include getters and setters.

Include an method named printStudentDetails() .

Create a class named Exam . Include the   following private attributes / member variables.

String exam

float score

Include a 2-argument constructor.

Include getters and setters.

Create a class named Book. Include the   following private attributes / member variables.

String bookName

Include a 1-argument constructor.

Include getters and setters.

Create a class named Library . Include the   following private attributes / member variables.

Book[5] books;

Int[5] bookCount;

Include a default constructor. – initialize the Book names - Java/Spring/HTML/Angular/SpringBoot and book count as 5 for each book position/index; [hard coded]

Include getters and setters.

Include an method named printBookInventory () .

 

Create another class called Example12Main. In the method, create instances of the above classes and test the above classes.

All text in bold corresponds to input and the rest corresponds to output.

Sample Input and Output:

Enter the Student name

Anbu

Enter the exam name

Java

Enter the score

90

Enter the exam name

SQL

Enter the score

45

Enter the exam name

Angular

Enter the score

25

Enter the exam name

SpringBoot

Enter the score

90

Enter the exam name

MicroServices

Enter the score

60

Anbu exam result

# of subject passed : 4

# of subject fail : 1 (pass  percentage is 50%)

Library Book Inventory details:

Java – 5

Spring – 5

HTML – 5

Angular – 5

SpringBoot - 5

Enter the book you want to lend from library:

Java/Spring/HTML/Angular/SpringBoot

Java

Enter the second book you want to lend from library:

Java/Spring/HTML/Angular/SpringBoot

Java

Now Library Book Inventory details:

Java – 3

Spring – 5

HTML – 5

Angular – 5

SpringBoot - 5

 

Anbu

From: Anbarasu Venkatachalam
Sent: Tuesday, May 5, 2020 18:22
To: Akash Narang <akash.narang@hcl.com>; Amit Kumar <amitkumar.a1@hcl.com>; Jyoti Singh <jyoti.singh@hcl.com>; Ananya Anshudhar <ananya.anshudhar@hcl.com>; Deepanshu Tiwari <deepanshu.tiwari@hcl.com>; Arunima Uniyal <arunima.uniyal@hcl.com>; Jyoti Upadhyay <jyoti.upadhyay@hcl.com>; Krishnakumar G M <krishnakumarg.m@hcl.com>; Avijit Shaw <avijit.shaw@hcl.com>; Lakshmi Dornala <lakshmi.dornala@hcl.com>; Rabia Garg <rabia.garg@hcl.com>; Saladi Swamy Naga Venkata Ganesh Saiteja <saladiswamyna.saite@hcl.com>; Shubham Gupta <shubham_gupta@hcl.com>; Sahitya Saurabh <sahitya.saurabh@hcl.com>; Vishnu Dutt <vishnu.dutt@hcl.com>; Pooja Cirikonda <pooja.cirikonda@hcl.com>; Sutapalli Navya <sutapalli.navya@hcl.com>; Siddharth Kumar Gupta <siddharthkumar.gupta@hcl.com>; Sparsh Jain <sparsh.jain@hcl.com>; Mohini Singh <mohini.singh2@hcl.com>; Dhanunjaya K <DhanunjayaK@hcl.com>; Abhishek Parsai <abhishekpar@hcl.com>; Atul Sharma <atul_sharma@hcl.com>; Samridhi Bareja <samridhi.bareja@hcl.com>; Monicca Gunasekaran <monicca.g@hcl.com>; Sangeetha B <sangeethab.s@hcl.com>; Archana G <archana.g@hcl.com>
Cc: Tasneem Badwahwala <tasneem.b@hcl.com>; Suchitra Bhat (HCL Financial Services) <Suchitra.Bhat@hcl.com>
Subject: RE: Credit Suisse: Batch #2, Java Full Stack Training - Day4 Exercises

 

Team – Adding below use cases to Day 4. While you submit pl submit as one document for day 4.

 

10.  Java 8 Features – one liner on each feature on your own words..

 

11. Create an class named Employee with the following private attributes / member variables.

String name

Address address

Department dept

Include a 2-argument constructor.

Include getters and setters.

Include an method named printEmployeeDetails() .

 Create a class named Address . Include the   following private attributes / member variables.

String city

String country

Include a 2-argument constructor.

 Include getters and setters.

 

Create a class named Department . Include the following private attributes / member variables.

Technology tech;

Include a 1-argument constructor.

 Include getters and setters

 

Create a class named Technology . Include the following private attributes / member variables.

String skillName;

Include a 1-argument constructor.

 Include getters and setters.

 

Create another class called Example11Main. In the method, create instances of the above classes and test the above classes.

All text in bold corresponds to input and the rest corresponds to output.

Sample Input and Output:

Enter the Employee name

Anbu

Enter the city

Chennai

Enter the country

India

Enter the skill

Java

Get the above inputs for 5 employees (different city, country, skill)

 

Print the each employee details in below format

Anbu | Chennai | India | Java

…..

Print the # of employees with Skill

# of employee with Java : 3

# of employee with .NET : 2

Print the # of employees with Country

# of employee with India : 4

# of employee with US : 1

 

12 Create an class named Student with the following private attributes / member variables.

String name

Exam[5] exam

Include a 2-argument constructor.

Include getters and setters.

Include an method named printStudentDetails() .

 Create a class named Exam . Include the   following private attributes / member variables.

String exam

float score

Include a 2-argument constructor.

 Include getters and setters.

 

 

Create another class called Example12Main. In the method, create instances of the above classes and test the above classes.

All text in bold corresponds to input and the rest corresponds to output.

Sample Input and Output:

Enter the Student name

Anbu

Enter the exam name

Java

Enter the score

90

Enter the exam name

SQL

Enter the score

45

Enter the exam name

Angular

Enter the score

25

Enter the exam name

SpringBoot

Enter the score

90

Enter the exam name

Micro Services

Enter the score

60

Anbu exam result

# of subject passed : 4

# of subject fail : 1 (pass  percentage is 50%)

From: Anbarasu Venkatachalam
Sent: Monday, May 4, 2020 10:41
To: Akash Narang <akash.narang@hcl.com>; Amit Kumar <amitkumar.a1@hcl.com>; Jyoti Singh <jyoti.singh@hcl.com>; Ananya Anshudhar <ananya.anshudhar@hcl.com>; Deepanshu Tiwari <deepanshu.tiwari@hcl.com>; Arunima Uniyal <arunima.uniyal@hcl.com>; Jyoti Upadhyay <jyoti.upadhyay@hcl.com>; Krishnakumar G M <krishnakumarg.m@hcl.com>; Avijit Shaw <avijit.shaw@hcl.com>; Lakshmi Dornala <lakshmi.dornala@hcl.com>; Rabia Garg <rabia.garg@hcl.com>; Saladi Swamy Naga Venkata Ganesh Saiteja <saladiswamyna.saite@hcl.com>; Shubham Gupta <shubham_gupta@hcl.com>; Sahitya Saurabh <sahitya.saurabh@hcl.com>; Vishnu Dutt <vishnu.dutt@hcl.com>; Pooja Cirikonda <pooja.cirikonda@hcl.com>; Sutapalli Navya <sutapalli.navya@hcl.com>; Siddharth Kumar Gupta <siddharthkumar.gupta@hcl.com>; Sparsh Jain <sparsh.jain@hcl.com>; Mohini Singh <mohini.singh2@hcl.com>; Dhanunjaya K <DhanunjayaK@hcl.com>; Abhishek Parsai <abhishekpar@hcl.com>; Atul Sharma <atul_sharma@hcl.com>; Samridhi Bareja <samridhi.bareja@hcl.com>; Monicca Gunasekaran <monicca.g@hcl.com>; Sangeetha B <sangeethab.s@hcl.com>; Archana G <archana.g@hcl.com>
Cc: Tasneem Badwahwala <tasneem.b@hcl.com>; Suchitra Bhat (HCL Financial Services) <Suchitra.Bhat@hcl.com>
Subject: RE: Credit Suisse: Batch #2, Java Full Stack Training - Day4 Exercises

 

 

Team,

                As informed, please complete the Day1,2,3 exercises. After completion please take up the below Day 4 exercises

 

Day 4 Java lab exercise

 

1.Create an abstract class named Shape with the following protected attributes / member variables.

String name

Include a 1-argument constructor.

Include getters and setters.

Include an abstract method named calculateArea() . This method returns a Float value.

Create a class named Circle . The class Circle is a derived class of Shape. Include the   following private attributes / member variables.

Integer radius

Include a 2-argument constructor. The order of the arguments is name, radius.

Include getters and setters.

Override the abstract method calculateArea() defined in the Shape class. This method returns the area of the circle. [Take the value of pi as 3.14]

Create a class named Square . The class Square is a derived class of Shape. Include the following private attributes / member variables.

Integer side

Include a 2-argument constructor. The order of the arguments is name, side.

Include getters and setters.

Override the abstract method calculateArea() defined in the Shape class. This method returns the area of the square.

Create a class named Rectangle . The class Rectangle is a derived class of Shape. Include the following private attributes / member variables.

Integer length

Integer breadth

Include a 3-argument constructor. The order of the arguments is name, length, breadth

Include getters and setters.

Override the abstract method calculateArea() defined in the Shape class. This method returns the area of the rectangle.

Create another class called Main. In the method, create instances of the above classes and test the above classes.

 

 

 

 

All Float values are displayed correct to 2 decimal places.

All text in bold corresponds to input and the rest corresponds to output.

Sample Input and Output 1:

Circle

Square

Rectangle

Enter the shape name

Circle

Enter the radius

25

Area of Circle is 1962.50

2. A Java interface can only contain method signatures and fields. The interface can be used to achieve polymorphism. In this problem, you will practice your knowledge on interfaces.

You are given an interface AdvancedArithmetic which contains a method signature int divisor_sum(int n). You need to write a class called MyCalculator which implements the interface.

divisorSum function just takes an integer as input and return the sum of all its divisors. For example divisors of 6 are 1, 2, 3 and 6, so divisor_sum should return 12. The value of n will be at most 1000.

Read the partially completed code in the editor and complete it. You just need to write the MyCalculator class only. Your class shouldn't be public.

Sample Input

6

Sample Output

I implemented: AdvancedArithmetic

12

Explanation

Divisors of 6 are 1,2,3 and 6. 1+2+3+6=12.

 

3.Create an abstract class named Card with the following protected attributes / member variables.

String holderName;

String cardNumber;

String expiryDate;

Include appropriate getters and setters.

Include appropriate constructors. In the 3-argument constructor, the order of the arguments is holderName, cardNumber, expiryDate.

Create a class named MembershipCard. The class MembershipCard is a derived class of Card. Include the following private attributes / member variables.

Integer rating

Include appropriate getters and setters.

Include appropriate constructors. In the 4-argument constructor, the order of the arguments is holderName, cardNumber, expiryDate, rating.

Create a class named PaybackCard. The class PaybackCard is a derived class of Card. Include the following private attributes / member variables.

Integer pointsEarned;

Double totalAmount;

Include appropriate getters and setters.

Include appropriate constructors. In the 5-argument constructor, the order of the arguments is holderName, cardNumber, expiryDate, pointsEarned, totalAmount.

Create another class called Main. In the method, create instances of the above classes and test the above classes. The card details are entered separated by a ‘|’.

All text in bold corresponds to input and the rest corresponds to output.

Sample Input and Output 1:

Select the Card

1.Payback Card

2.Membership Card

1

Enter the Card Details:

Anandhi|12345|14/01/2020

Enter points in card

1000

Enter Amount

50000

Anandhi's Payback Card Details:

Card Number 12345

Points Earned 1000

Total Amount 50000.0

 

4. The following Java applications contain errors. Point out the statement(s) that contain errors. Explain what each of the errors is, and how it can be fixed.

public class OOPExercises {

    public static void main(String[] args) {

        A objA = new A();

        System.out.println("in main(): ");

        System.out.println("objA.a = "+objA.a);

        objA.a = 222;

    }

}

 

public class A {

    private int a = 100;

    public void setA( int value) {

        a = value;

}

    public int getA() {

        return a;

    }

} //class A

 

5. Show the output of the following applications.

public class OOPExercises {

    public static void main(String[] args) {

        FirstClass objA = new FirstClass();

        SecondClass objB = new SecondClass();

        System.out.println("in main(): ");

        System.out.println("objA.a = "+objA.getFirstClass());

        System.out.println("objB.b = "+objB.getSecondClass());

        objA.setFirstClass (222);

        objB.setSecondClass (333.33);

        System.out.println("objA.a = "+objA.getFirstClass());

        System.out.println("objB.b = "+objB.getSecondClass());

    }

}

 

 

 

Output:

 

 

public class FirstClass {

    int a = 100;

    public FirstClass () {

        System.out.println("in the constructor of class FirstClass: ");

        System.out.println("a = "+a);

        a = 333;

        System.out.println("a = "+a);

    }

    public void setFirstClass( int value) {

        a = value;

    }

    public int getFirstClass() {

        return a;

    }

} //class FirstClass

public class SecondClass {

    double b = 123.45;

    public SecondClass() {

        System.out.println("-----in the constructor of class B: ");

        System.out.println("b = "+b);

        b = 3.14159;

        System.out.println("b = "+b);

    }

    public void setSecondClass( double value) {

        b = value;

    }

    public double getSecondClass() {

        return b;

    }

} //class SecondClass

 

6.

public class OOPExercises {

    static int a = 555;

   

    public static void main(String[] args) {

        A objA = new A();

        B objB1 = new B();

        A objB2 = new B();

        C objC1 = new C();

        B objC2 = new C();

        A objC3 = new C();

        objA.display();

        objB1.display();

        objB2.display();

        objC1.display();

        objC2.display();

        objC3.display();    }

}

Output:

 

 

public class A {

    int a = 100;

    public void display() {

        System.out.printf("a in A = %d\n", a);

    }

} //class A

public class B extends A {

    private int a = 123;

    public void display() {

        System.out.printf("a in B = %d\n", a);

    }   

} //class B

public class C extends B {

    private int a = 543;

    public void display() {

        System.out.printf("a in C = %d\n", a);

    }

} //class C

 

7. Write a program to find and remove non pangram string and print the pangram string, ,non pangram, palindrome string separately.

(Hint: Pangrams are words or sentences containing every letter of the alphabet at least once)

Sample Input

The quick brown fox madam jumps over the lazy dog sp good.                                               

Sample Output:

Pangram: The quick brown fox jumps over the lazy dog sp.                                               

Non Pangram: good

Palindrome : madam

 

Try to come up with your own input and the expected output…

 

So need screen shot of two inputs + two outputs

 

 

 

 

8. Static Code Analysis Report

 

9. Project Explorer Snap shot